#!/usr/bin/python3
# coding by junenu(june@uruu-ru.net)

import argparse
import platform
import subprocess
import re
import requests
import yaml
from abc import ABC, abstractmethod

# Load configuration from conf.yaml
def load_config(file_path):
    with open(file_path, 'r') as file:
        config = yaml.safe_load(file)
    return config
config = load_config('conf.yaml')

# Variables
## FOO = config.get('FOO', 'default value')
## Ping
PING_COUNT = config.get('PING_COUNT', 3)
PING_INTERVAL = config.get('PING_INTERVAL', 0.5)
PING_TARGETS_IPV4 = config.get('PING_TARGETS_IPV4', ['8.8.8.8', '8.8.4.4'])
PING_TARGETS_IPV6 = config.get('PING_TARGETS_IPV6', ['2001:4860:4860::8888', '2001:4860:4860::8844'])

## DNS
DOMAIN_A_RECORDS = config.get('DOMAIN_A_RECORDS', ['www.yahoo.co.jp', 'www.google.com'])
DOMAIN_AAAA_RECORDS = config.get('DOMAIN_AAAA_RECORDS', ['www.google.com'])

## HTTP
HTTP_IPV4_TARGET = config.get('HTTP_IPV4_TARGET', 'https://ipv4.google.com')
HTTP_IPV6_TARGET = config.get('HTTP_IPV6_TARGET', 'https://ipv6.google.com')
HTTP_TARGETS = [HTTP_IPV4_TARGET, HTTP_IPV6_TARGET]

## Traceroute
TRACEROUTE_COUNT = config.get('TRACEROUTE_COUNT', 5)
TRACEROUTE_INTERVAL = config.get('TRACEROUTE_INTERVAL', 0.1)
TRACEROUTE_TARGET = config.get('TRACEROUTE_TARGET', '8.8.8.8')
VIA_NW_DEVICES = config.get('VIA_NW_DEVICES', {'192.168.10.1': 'Router1'})

class NetCheckBase(ABC):
    """
    Abstract base class for IPv4/IPv6.
    Methods that can specify the interface name as an argument.
    """

    @abstractmethod
    def get_ip_address_v4(self, interface: str) -> str:
        pass

    @abstractmethod
    def get_ip_address_v6(self, interface: str) -> str:
        pass

    @abstractmethod
    def get_default_gateway_v4(self, interface: str) -> str:
        pass

    @abstractmethod
    def get_default_gateway_v6(self, interface: str) -> str:
        pass

    @abstractmethod
    def ping_host(self, host: str, family: str = 'ipv4') -> bool:
        pass

    @abstractmethod
    def traceroute_host(self, host: str, family: str = 'ipv4') -> str:
        pass

    @abstractmethod
    def dns_lookup(self, domain: str, dns_server: str = None, record_type: str = 'A') -> str:
        pass

    def http_check(self, url: str) -> bool:
        try:
            with requests.get(url, timeout=5) as response:
                status = response.status_code
                if 200 <= status < 300:
                    print(f'\033[32m OK \033[0m {url} -> {status}')
                    return True
                else:
                    print(f'\033[31m NG \033[0m {url} -> {status}')
        except Exception:
            print(f'\033[31m NG \033[0m {url}')
        return False


class MacNetCheck(NetCheckBase):

    def get_ip_address_v4(self, interface: str) -> str:
        cmd_ifconfig = ['ifconfig', interface]
        result = subprocess.run(cmd_ifconfig, capture_output=True, text=True)
        if result.returncode == 0:
            match = re.search(r'inet\s+([\d\.]+)\s+netmask', result.stdout)
            if match:
                return match.group(1)
        return None

    def get_ip_address_v6(self, interface: str) -> str:
        cmd_ifconfig = ['ifconfig', interface]
        result = subprocess.run(cmd_ifconfig, capture_output=True, text=True)
        if result.returncode == 0:
            match = re.search(r'inet6\s+([0-9a-fA-F:]+)\s+prefixlen', result.stdout)
            if match:
                return match.group(1)
        return None

    def get_default_gateway_v4(self, interface: str) -> str:
        cmd_netstat = ['netstat', '-rn', '-f', 'inet']
        result = subprocess.run(cmd_netstat, capture_output=True, text=True)
        if result.returncode == 0:
            lines = result.stdout.splitlines()
            # "default            192.168.10.1       UGScg                 en0 "
            for line in lines:
                if line.startswith('default'):
                    cols = line.split()
                    if len(cols) >= 3:
                        gw = cols[1]
                        if interface in cols:
                            return gw
        return None

    def get_default_gateway_v6(self, interface: str) -> str:
        cmd_netstat = ['netstat', '-rn', '-f', 'inet6']
        result = subprocess.run(cmd_netstat, capture_output=True, text=True)
        if result.returncode == 0:
            lines = result.stdout.splitlines()
            # "default                                 fe80::1%en0   UGcI           en0"
            for line in lines:
                if line.strip().startswith('default'):
                    cols = line.split()
                    if len(cols) >= 2:
                        gw = cols[1]
                        if interface in cols:
                            return gw.split('%')[0]  # fe80::1%en0 -> fe80::1
        return None

    def ping_host(self, host: str, family: str = 'ipv4') -> bool:
        if family == 'ipv6':
            cmd = ['ping6', '-c', str(PING_COUNT), '-i', str(PING_INTERVAL), host]
        else:
            cmd = ['ping', '-c', str(PING_COUNT), '-i', str(PING_INTERVAL), host]
        result = subprocess.run(cmd, capture_output=True, text=True)
        return (result.returncode == 0)

    def traceroute_host(self, host: str, family: str = 'ipv4') -> str:
        def check_command_exist(command: str) -> bool:
            try:
                subprocess.run(['which', command], check=True, capture_output=True)
                return True
            except subprocess.CalledProcessError:
                return False

        use_mtr = check_command_exist('mtr')
        if use_mtr:
            if family == 'ipv6':
                cmd = ['sudo', 'mtr', '-n', '-c', str(TRACEROUTE_COUNT), '-6', '-r', '-i', str(TRACEROUTE_INTERVAL), host]
            else:
                cmd = ['sudo', 'mtr', '-n', '-c', '3', '-r', '-i', str(TRACEROUTE_INTERVAL), host]
        else:
            if family == 'ipv6':
                cmd = ['traceroute6', host]
            else:
                cmd = ['traceroute', host]

        result = subprocess.run(cmd, capture_output=True, text=True)
        output = result.stdout
        for dev_name, dev_ip in VIA_NW_DEVICES.items():
            if dev_ip in output:
                print(f'\033[32m OK \033[0m 指定ルーター {dev_name} {dev_ip} を通過')
            else:
                print(f'\033[31m NG \033[0m 指定ルーター {dev_name} {dev_ip} は含まれていません')
        return output

    def dns_lookup(self, domain: str, dns_server: str = None, record_type: str = 'A') -> None:
        if dns_server is None:
            cmd = ['dig', domain, record_type, '+short']
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.stdout != b'':
                print(f'\033[32m OK \033[0m {record_type} record DNS resolution to {domain}')
            else:
                print(f'\033[31m NG \033[0m {record_type} record DNS resolution to {domain}')
        else:
            cmd = ['dig', domain, record_type, '@' + dns_server, '+short']
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.stdout != b'':
                print(f'\033[32m OK \033[0m {record_type} record DNS resolution to {domain} with {dns_server}')
            else:
                print(f'\033[31m NG \033[0m {record_type} record DNS resolution to {domain} with {dns_server}')


def get_os_type():
    return platform.system()


def get_net_checker() -> NetCheckBase:
    os_type = get_os_type()
    if os_type == 'Darwin':
        return MacNetCheck()
    # elif os_type == 'Windows':
    #     return WindowsNetCheck()
    # elif os_type == 'Linux':
    #     return LinuxNetCheck()
    else:
        raise NotImplementedError(f'Unsupported OS: {os_type}')


def main():
    parser = argparse.ArgumentParser(description='Network check tool')
    parser.add_argument('interface', help='Interface name (e.g. en0, eth0)')
    args = parser.parse_args()

    checker = get_net_checker()
    if_name = args.interface

        else:

    def process(self):
        self.os.process()

# main precedure
def main():
    os_handler = OsHandler()
    os_handler.process()

# main
if __name__ == "__main__":
    main()
